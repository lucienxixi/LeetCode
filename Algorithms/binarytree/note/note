binary tree

1. 章节：
chapter12 递归实现二叉树的遍历法与分治法
chapter13 非递归实现二叉树的遍历
chapter5直播 二叉树分治法
chapter34 后序遍历非递归和Morris
chapter35 bst的增删查改

2. 题目：
   lc257. Binary Tree Paths *
   lc129. Sum Root to Leaf Numbers *
   lc236. Lowest Common Ancestor of a Binary Tree
   lc235. Lowest Common Ancestor of a Binary Search Tree
   lc144. Binary Tree Preorder Traversal *divide and conquer解法
   lc94. Binary Tree Inorder Traversal
   lc145. Binary Tree Postorder Traversal
   lc783. Minimum Distance Between BST Nodes *
   lc114. Flatten Binary Tree to Linked List *
   lc112. Path Sum
   lc113. Path Sum II
   lc437. Path Sum III  lc560. Subarray Sum Equals K
   lc173. Binary Search Tree Iterator
   lc543. Diameter of Binary Tree
   lc99. Recover Binary Search Tree
   lc662. Maximum Width of Binary Tree *
   lc938. Range Sum of BST
   lc863. All Nodes Distance K in Binary Tree
   lc1448. Count Good Nodes in Binary Tree
   lc108. Convert Sorted Array to Binary Search Tree
   lc230. Kth Smallest Element in a BST
   lc270. Closest Binary Search Tree Value
   lc272. Closest Binary Search Tree Value II  lc658. Find K Closest Elements
   未做：
   bst的增删改查
   

3. 递归，深搜，回溯：
    以下总结对于不同函数的嵌套也适用，不仅限于递归函数，递归函数也可以理解为不同函数的嵌套。
    全局变量 vs 递归函数局部变量（传入递归函数的参数中）
        基本数据类型：
        1. 全局变量不收递归的影响或者说不受函数参数传递的影响，基本数据类型作为全局变量可以记录整个递归流程。
        2. 如果基本数据类型作为递归函数的局部变量，函数的每一层都会创建新的变量，对于该变量的计算也只在本层有效，如果出了本层，在外层最开始的值是多少，
           则还是多少（被操作系统自动回溯）。
        引用数据类型：
        1. 引用数据类型作为全局变量仍然很好使，不管修改引用指向的对象中的值还是修改引用指向的对象，都能不受递归函数的影响。
        2. 当引用数据类型作为递归函数中的局部变量的时候，如果仅仅需要对引用所指向的对象中的值进行修改的话，那么在递归的过程中，一直都是对同一个对象操作。
           但是如果修改了该引用指向的对象，比如new了一个新对象或者root = root.right，这时的引用是新创建的，只在本层有效，那么当退出本层的时候引用还
           是指向在外层中原来的对象(自动回溯)。但是如果在内层函数中虽然创建了新引用，但是对对象的值进行了修改，如：root = root.right; root.val = 3; 
           对象的值被修改还是在全局都有效的，只不过退出内层时，引用还是指向的原来的对象。
        3. 如果仅对引用指向的对象中的值进行修改比如说 root.val，arrayList.add()... 递归不会影响对象中的值，操作系统不会自动回溯，所以根据题意和
           解题思路，必要时候要手动回溯。
    关于自动回溯，手动回溯和函数传参的例子可以参考lc144，lc783，lc114，lc257中的多种解法和test
   
4. 二叉树的深搜DFS
   遍历法：
       前序遍历 preorder traversal
       中序遍历 inorder traversal
       后序遍历 postorder traversal
   分治法：
       本质上也是做遍历，是后序遍历。
   实现方式：
       递归实现
       非递归实现
   遍历法vs分治法：
       遍历法一般没有函数返回值，会有共享变量或者局部变量来记录在遍历中的所需要的数据。
       分治法一般会用到函数返回值，然后利用左子树函数和右子树函数返回的结果，然后合并出整棵树的所需要的结果。
   模板：见代码文件
   
   
   
   

还没解决的问题：
funciton(n+1) 等价于 int n1 = n+1; function(n1) 吗？ 跑一下java visualizer


   



